import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.List;

public class VulnerabilityChecker {

    public static void main(String[] args) {
        if (args.length != 1) {
            System.err.println("Usage: java VulnerabilityChecker <file.java>");
            System.exit(1);
        }

        String filePath = args[0];
        try {
            List<String> lines = Files.readAllLines(Paths.get(filePath));
            boolean foundVulnerabilities = false;

            foundVulnerabilities |= checkForSystemExit(lines);
            foundVulnerabilities |= checkForSQLVulnerabilities(lines);

            if (!foundVulnerabilities) {
                System.out.println("No vulnerabilities detected.");
            }
        } catch (IOException e) {
            System.err.println("Error reading file: " + e.getMessage());
        }
    }

    private static boolean checkForSystemExit(List<String> lines) {
        boolean found = false;
        for (int i = 0; i < lines.size(); i++) {
            String line = lines.get(i).trim();
            if (line.contains("System.exit")) {
                System.out.printf("Warning: Use of System.exit detected on line %d. Potential vulnerability.\n", i + 1);
                found = true;
            }
        }
        return found;
    }

    private static boolean checkForSQLVulnerabilities(List<String> lines) {
        boolean found = false;

        for (int i = 0; i < lines.size(); i++) {
            String line = lines.get(i).trim();

            // Check for SQL Injection (Unparameterized Queries)
            if (line.matches(".*Statement.*executeQuery\\(.*\\+.*\\).*")) {
                System.out.printf("Vulnerability: SQL Injection risk on line %d. Unparameterized query detected.\n", i + 1);
                found = true;
            }

            // Check for Hardcoded Credentials
            if (line.matches(".*(Connection|DriverManager)\\.getConnection\\(.*\"jdbc:.*;user=.*;password=.*\".*\\).*")) {
                System.out.printf("Vulnerability: Hardcoded database credentials on line %d.\n", i + 1);
                found = true;
            }

            // Check for Detailed SQL Error Messages
            if (line.contains("SQLException") && line.contains("printStackTrace")) {
                System.out.printf("Vulnerability: Detailed SQL error messages could leak sensitive information on line %d.\n", i + 1);
                found = true;
            }

            // Check for Excessive Privileges
            if (line.matches(".*GRANT ALL PRIVILEGES.*")) {
                System.out.printf("Vulnerability: Excessive database privileges granted on line %d.\n", i + 1);
                found = true;
            }

            // Check for Insecure Data Transmission (looking for connections without SSL)
            if (line.matches(".*DriverManager.getConnection\\(.*jdbc:mysql://.*") && !line.contains("useSSL=true")) {
                System.out.printf("Vulnerability: Insecure data transmission (no SSL) on line %d.\n", i + 1);
                found = true;
            }

        }
        return found;
    }
}
